// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: prescript.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bc_Prescript {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var linkToLocalSystem: String = String()

  var recieverPublicKey: String = String()

  var senderPublicKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bc_Prescription_Action {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var action: String = String()

  ///define sender and reciever of prescript
  var recieverPublicKey: String = String()

  ///reserve 1 to 15 for higher priority fields
  var senderPublicKey: String = String()

  var options: Bc_Prescription_Action.OneOf_Options? = nil

  var recievePrescription: Bc_recievePrescript {
    get {
      if case .recievePrescription(let v)? = options {return v}
      return Bc_recievePrescript()
    }
    set {options = .recievePrescription(newValue)}
  }

  var sendPrescription: Bc_sendPrescript {
    get {
      if case .sendPrescription(let v)? = options {return v}
      return Bc_sendPrescript()
    }
    set {options = .sendPrescription(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Options: Equatable {
    case recievePrescription(Bc_recievePrescript)
    case sendPrescription(Bc_sendPrescript)

  #if !swift(>=4.1)
    static func ==(lhs: Bc_Prescription_Action.OneOf_Options, rhs: Bc_Prescription_Action.OneOf_Options) -> Bool {
      switch (lhs, rhs) {
      case (.recievePrescription(let l), .recievePrescription(let r)): return l == r
      case (.sendPrescription(let l), .sendPrescription(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Bc_recievePrescript {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var prescriptHash: String = String()

  var recieverPublicKey: String = String()

  var senderPublicKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bc_sendPrescript {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var senderPublicKey: String = String()

  var recieverPublicKey: String = String()

  var prescriptHash: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bc"

extension Bc_Prescript: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Prescript"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "LinkToLocalSystem"),
    2: .standard(proto: "reciever_publicKey"),
    3: .standard(proto: "sender_publicKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.linkToLocalSystem)
      case 2: try decoder.decodeSingularStringField(value: &self.recieverPublicKey)
      case 3: try decoder.decodeSingularStringField(value: &self.senderPublicKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.linkToLocalSystem.isEmpty {
      try visitor.visitSingularStringField(value: self.linkToLocalSystem, fieldNumber: 1)
    }
    if !self.recieverPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.recieverPublicKey, fieldNumber: 2)
    }
    if !self.senderPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.senderPublicKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bc_Prescript, rhs: Bc_Prescript) -> Bool {
    if lhs.linkToLocalSystem != rhs.linkToLocalSystem {return false}
    if lhs.recieverPublicKey != rhs.recieverPublicKey {return false}
    if lhs.senderPublicKey != rhs.senderPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bc_Prescription_Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Prescription_Action"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    100: .same(proto: "action"),
    1: .standard(proto: "reciever_publicKey"),
    2: .standard(proto: "sender_publicKey"),
    200: .standard(proto: "recieve_Prescription"),
    201: .standard(proto: "send_Prescription"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.recieverPublicKey)
      case 2: try decoder.decodeSingularStringField(value: &self.senderPublicKey)
      case 100: try decoder.decodeSingularStringField(value: &self.action)
      case 200:
        var v: Bc_recievePrescript?
        if let current = self.options {
          try decoder.handleConflictingOneOf()
          if case .recievePrescription(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.options = .recievePrescription(v)}
      case 201:
        var v: Bc_sendPrescript?
        if let current = self.options {
          try decoder.handleConflictingOneOf()
          if case .sendPrescription(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.options = .sendPrescription(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.recieverPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.recieverPublicKey, fieldNumber: 1)
    }
    if !self.senderPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.senderPublicKey, fieldNumber: 2)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 100)
    }
    switch self.options {
    case .recievePrescription(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
    case .sendPrescription(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bc_Prescription_Action, rhs: Bc_Prescription_Action) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.recieverPublicKey != rhs.recieverPublicKey {return false}
    if lhs.senderPublicKey != rhs.senderPublicKey {return false}
    if lhs.options != rhs.options {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bc_recievePrescript: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".recievePrescript"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "prescriptHash"),
    2: .standard(proto: "reciever_publicKey"),
    3: .standard(proto: "sender_publicKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.prescriptHash)
      case 2: try decoder.decodeSingularStringField(value: &self.recieverPublicKey)
      case 3: try decoder.decodeSingularStringField(value: &self.senderPublicKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prescriptHash.isEmpty {
      try visitor.visitSingularStringField(value: self.prescriptHash, fieldNumber: 1)
    }
    if !self.recieverPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.recieverPublicKey, fieldNumber: 2)
    }
    if !self.senderPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.senderPublicKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bc_recievePrescript, rhs: Bc_recievePrescript) -> Bool {
    if lhs.prescriptHash != rhs.prescriptHash {return false}
    if lhs.recieverPublicKey != rhs.recieverPublicKey {return false}
    if lhs.senderPublicKey != rhs.senderPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bc_sendPrescript: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".sendPrescript"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "sender_publicKey"),
    3: .standard(proto: "reciever_publicKey"),
    1: .same(proto: "prescriptHash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.prescriptHash)
      case 2: try decoder.decodeSingularStringField(value: &self.senderPublicKey)
      case 3: try decoder.decodeSingularStringField(value: &self.recieverPublicKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prescriptHash.isEmpty {
      try visitor.visitSingularStringField(value: self.prescriptHash, fieldNumber: 1)
    }
    if !self.senderPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.senderPublicKey, fieldNumber: 2)
    }
    if !self.recieverPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.recieverPublicKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bc_sendPrescript, rhs: Bc_sendPrescript) -> Bool {
    if lhs.senderPublicKey != rhs.senderPublicKey {return false}
    if lhs.recieverPublicKey != rhs.recieverPublicKey {return false}
    if lhs.prescriptHash != rhs.prescriptHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
