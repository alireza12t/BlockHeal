// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: payload.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PGPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var action: String = String()

  var options: PGPayload.OneOf_Options? = nil

  var createaccount: CreateAccountAction {
    get {
      if case .createaccount(let v)? = options {return v}
      return CreateAccountAction()
    }
    set {options = .createaccount(newValue)}
  }

  var sendprescript: SendPrescriptAction {
    get {
      if case .sendprescript(let v)? = options {return v}
      return SendPrescriptAction()
    }
    set {options = .sendprescript(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Options: Equatable {
    case createaccount(CreateAccountAction)
    case sendprescript(SendPrescriptAction)

  #if !swift(>=4.1)
    static func ==(lhs: PGPayload.OneOf_Options, rhs: PGPayload.OneOf_Options) -> Bool {
      switch (lhs, rhs) {
      case (.createaccount(let l), .createaccount(let r)): return l == r
      case (.sendprescript(let l), .sendprescript(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct CreateAccountAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var label: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SendPrescriptAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var index: String = String()

  var hash: String = String()

  var patPublicKey: String = String()

  var docPublicKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PGPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PGPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    100: .same(proto: "action"),
    200: .same(proto: "createaccount"),
    201: .same(proto: "sendprescript"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 100: try decoder.decodeSingularStringField(value: &self.action)
      case 200:
        var v: CreateAccountAction?
        if let current = self.options {
          try decoder.handleConflictingOneOf()
          if case .createaccount(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.options = .createaccount(v)}
      case 201:
        var v: SendPrescriptAction?
        if let current = self.options {
          try decoder.handleConflictingOneOf()
          if case .sendprescript(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.options = .sendprescript(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 100)
    }
    switch self.options {
    case .createaccount(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 200)
    case .sendprescript(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PGPayload, rhs: PGPayload) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.options != rhs.options {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CreateAccountAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CreateAccountAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.label)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CreateAccountAction, rhs: CreateAccountAction) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SendPrescriptAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SendPrescriptAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "hash"),
    3: .same(proto: "patPublicKey"),
    4: .same(proto: "docPublicKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.index)
      case 2: try decoder.decodeSingularStringField(value: &self.hash)
      case 3: try decoder.decodeSingularStringField(value: &self.patPublicKey)
      case 4: try decoder.decodeSingularStringField(value: &self.docPublicKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.index.isEmpty {
      try visitor.visitSingularStringField(value: self.index, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 2)
    }
    if !self.patPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.patPublicKey, fieldNumber: 3)
    }
    if !self.docPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.docPublicKey, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SendPrescriptAction, rhs: SendPrescriptAction) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.patPublicKey != rhs.patPublicKey {return false}
    if lhs.docPublicKey != rhs.docPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
