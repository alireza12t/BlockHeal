// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: doctor.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bc_Doctor_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var publickey: String = String()

  var sentPrescripts: [Bc_Prescript] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Contacts {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var fullname: String = String()

    ///reserve 1 to 15 for higher priority fields
    var eamil: String = String()

    var phonenumber: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct Bc_DoctorAccount_Container {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [Bc_Doctor_Account] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bc"

extension Bc_Doctor_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Doctor_Account"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Publickey"),
    16: .standard(proto: "sent_prescripts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.publickey)
      case 16: try decoder.decodeRepeatedMessageField(value: &self.sentPrescripts)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.publickey.isEmpty {
      try visitor.visitSingularStringField(value: self.publickey, fieldNumber: 1)
    }
    if !self.sentPrescripts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sentPrescripts, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bc_Doctor_Account, rhs: Bc_Doctor_Account) -> Bool {
    if lhs.publickey != rhs.publickey {return false}
    if lhs.sentPrescripts != rhs.sentPrescripts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bc_Doctor_Account.Contacts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Bc_Doctor_Account.protoMessageName + ".Contacts"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "Fullname"),
    16: .same(proto: "Eamil"),
    17: .same(proto: "Phonenumber"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.fullname)
      case 16: try decoder.decodeSingularStringField(value: &self.eamil)
      case 17: try decoder.decodeSingularStringField(value: &self.phonenumber)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fullname.isEmpty {
      try visitor.visitSingularStringField(value: self.fullname, fieldNumber: 2)
    }
    if !self.eamil.isEmpty {
      try visitor.visitSingularStringField(value: self.eamil, fieldNumber: 16)
    }
    if !self.phonenumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phonenumber, fieldNumber: 17)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bc_Doctor_Account.Contacts, rhs: Bc_Doctor_Account.Contacts) -> Bool {
    if lhs.fullname != rhs.fullname {return false}
    if lhs.eamil != rhs.eamil {return false}
    if lhs.phonenumber != rhs.phonenumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bc_DoctorAccount_Container: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoctorAccount_Container"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.entries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bc_DoctorAccount_Container, rhs: Bc_DoctorAccount_Container) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
